!function(t,s){"object"==typeof exports&&"object"==typeof module?module.exports=s():"function"==typeof define&&define.amd?define("httpStatus",[],s):"object"==typeof exports?exports.httpStatus=s():t.httpStatus=s()}(this,(function(){return(()=>{"use strict";var t={285:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.HttpCheck=void 0,s.HttpCheck=class{constructor(t){this.response=t,this.data=null}nested(t){let s={};if(t&&"string"==typeof t&&"object"==typeof this.response.data){const e=t.split(".");if(!(e.length>1))return this.response.data&&"object"==typeof this.response.data?this.response.data[e[0]]:null;s=this.response.data;for(let t=0;t<e.length;t+=1){if(!s||void 0===s[e[t]])return null;if(s=s[e[t]],t===e.length-1)return s}}return this.response.data}expect(t){return this.data=this.nested(t),this}toBeEqualTo(t){return!!["string","number","boolean","undefined"].includes(typeof this.data)&&this.data===t}toBeGreaterThan(t){return"number"==typeof this.data&&"number"==typeof t&&this.data>t}toBeLessThan(t){return"number"==typeof this.data&&"number"==typeof t&&this.data<t}toBeTypeof(t){return!!["string","number","boolean","undefined"].includes(t)&&typeof this.data===t}toMatch(t){return"string"==typeof this.data&&t instanceof RegExp&&t.test(this.data)}ToBeNull(){return null===this.data}}},923:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.default=[{status:100,statusText:"Continue"},{status:101,statusText:"Switching Protocol"},{status:103,statusText:"Processing (WebDAV)"},{status:200,statusText:"OK"},{status:201,statusText:"Created"},{status:202,statusText:"Accepted"},{status:203,statusText:"Non-Authoritative Information"},{status:204,statusText:"No Content"},{status:205,statusText:"Reset Content"},{status:206,statusText:"Partial Content"},{status:207,statusText:"Multi-Status (WebDAV)"},{status:208,statusText:"Multi-Status (WebDAV)"},{status:226,statusText:"IM Used (HTTP Delta encoding)"},{status:300,statusText:"Multiple Choice"},{status:301,statusText:"Moved Permanently"},{status:302,statusText:"Found"},{status:303,statusText:"See Other"},{status:304,statusText:"Not Modified"},{status:305,statusText:"Use Proxy"},{status:306,statusText:"unused"},{status:307,statusText:"Temporary Redirect"},{status:308,statusText:"Permanent Redirect"},{status:400,statusText:"Bad Request"},{status:401,statusText:"Unauthorized"},{status:402,statusText:"Payment Required"},{status:403,statusText:"Forbidden"},{status:404,statusText:"Not Found"},{status:405,statusText:"Method Not Allowed"},{status:406,statusText:"Not Acceptable "},{status:407,statusText:"Proxy Authentication Required"},{status:408,statusText:"Request Timeout"},{status:409,statusText:"Conflict"},{status:410,statusText:"Gone"},{status:411,statusText:"Length Required"},{status:412,statusText:"Precondition Failed"},{status:413,statusText:"Payload Too Large"},{status:414,statusText:"URI Too Long"},{status:415,statusText:"Unsupported Media Type"},{status:416,statusText:"Requested Range Not Satisfiable"},{status:417,statusText:"Expectation Failed"},{status:418,statusText:"I'm a teapot"},{status:421,statusText:"Misdirected Request"},{status:422,statusText:"Unprocessable Entity (WebDAV)"},{status:423,statusText:"Locked (WebDAV)"},{status:424,statusText:"Failed Dependency (WebDAV)"},{status:426,statusText:"Upgrade Required"},{status:428,statusText:"Precondition Required"},{status:429,statusText:"Too Many Requests"},{status:431,statusText:"Request Header Fields Too Large"},{status:451,statusText:"Unavailable For Legal Reasons"},{status:500,statusText:"Internal Server Error"},{status:501,statusText:"Not Implemented"},{status:502,statusText:"Bad Gateway"},{status:503,statusText:"Service Unavailable"},{status:504,statusText:"Gateway Timeout"},{status:505,statusText:"HTTP Version Not Supported"},{status:506,statusText:"Variant Also Negotiates"},{status:507,statusText:"Insufficient Storage"},{status:508,statusText:"Loop Detected (WebDAV)"},{status:510,statusText:"Not Extended"},{status:511,statusText:"Network Authentication Required"}]},799:function(t,s,e){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(s,"__esModule",{value:!0});const u=e(285),o=a(e(923)),n=t=>t.replace(/[^a-zA-Z0-9]/gu,""),r=[{status:"Informative",min:100,max:199},{status:"Success",min:200,max:299},{status:"Redirection",min:300,max:399},{status:"ClientError",min:400,max:499},{status:"ServerError",min:500,max:599}],i={findStatus(t){let s={status:0,statusText:""};if(Number.isInteger(t)?s=o.default.find((s=>s.status===t)):"string"==typeof t?s=o.default.find((s=>s.statusText===t)):"object"==typeof t&&Number.isInteger(t.status)&&(s=o.default.find((s=>s.status===t.status))),!s)throw new Error(`Status code not found: ${JSON.stringify(t)}`);return s},addRangeMethods(){for(let t=0;t<r.length;t+=1){const s=`is${r[t].status}`;i[s]=s=>this.isBetween(s,r[t].min,r[t].max)}return this},addStatusMethods(){for(let t=0;t<o.default.length;t+=1){const s=`is${n(o.default[t].statusText)}`;i[s]=s=>this.findStatus(s).status===o.default[t].status}return this},addFormatResponseMethods(){for(let t=0;t<o.default.length;t+=1){const s=`response${n(o.default[t].statusText)}`;i[s]=(s,e)=>this.formatResponse(o.default[t].status,s,e)}return this},isBetween(t,s,e){const a=i.findStatus(t);return a&&a.status>=s&&a.status<=e},formatResponseConfig(t,s){const e=t.config?t.config.method:"",a=t.config?t.config.data:{},u=t.config?t.config.url:"",o=t.request?t.request.responseURL:"";return{url:u||o,method:e,data:a,source:s}},formatResponse(t,s,e,a){const u=this.findStatus(t);return{status:u.status,statusText:u.statusText,config:Object.assign({url:"",method:"",data:{},source:""},a),data:s,error:e}},checkResponseData:t=>new u.HttpCheck(t)};i.addRangeMethods().addStatusMethods().addFormatResponseMethods(),t.exports=i}},s={};return function e(a){var u=s[a];if(void 0!==u)return u.exports;var o=s[a]={exports:{}};return t[a].call(o.exports,o,o.exports,e),o.exports}(799)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,