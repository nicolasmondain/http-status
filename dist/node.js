!function(t,s){if("object"==typeof exports&&"object"==typeof module)module.exports=s();else if("function"==typeof define&&define.amd)define([],s);else{var e=s();for(var a in e)("object"==typeof exports?exports:t)[a]=e[a]}}(global,(function(){return(()=>{"use strict";var t={285:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.HttpCheck=void 0,s.HttpCheck=class{constructor(t){this.response=t,this.data=null}nested(t){let s={};if(t&&"string"==typeof t&&"object"==typeof this.response.data){const e=t.split(".");if(!(e.length>1))return this.response.data&&"object"==typeof this.response.data?this.response.data[e[0]]:null;s=this.response.data;for(let t=0;t<e.length;t+=1){if(!s||void 0===s[e[t]])return null;if(s=s[e[t]],t===e.length-1)return s}}return this.response.data}expect(t){return this.data=this.nested(t),this}toBeEqualTo(t){return!!["string","number","boolean","undefined"].includes(typeof this.data)&&this.data===t}toBeGreaterThan(t){return"number"==typeof this.data&&"number"==typeof t&&this.data>t}toBeLessThan(t){return"number"==typeof this.data&&"number"==typeof t&&this.data<t}toBeTypeof(t){return!!["string","number","boolean","undefined"].includes(t)&&typeof this.data===t}toMatch(t){return"string"==typeof this.data&&t instanceof RegExp&&t.test(this.data)}ToBeNull(){return null===this.data}}},923:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.default=[{status:100,statusText:"Continue"},{status:101,statusText:"Switching Protocol"},{status:103,statusText:"Processing (WebDAV)"},{status:200,statusText:"OK"},{status:201,statusText:"Created"},{status:202,statusText:"Accepted"},{status:203,statusText:"Non-Authoritative Information"},{status:204,statusText:"No Content"},{status:205,statusText:"Reset Content"},{status:206,statusText:"Partial Content"},{status:207,statusText:"Multi-Status (WebDAV)"},{status:208,statusText:"Multi-Status (WebDAV)"},{status:226,statusText:"IM Used (HTTP Delta encoding)"},{status:300,statusText:"Multiple Choice"},{status:301,statusText:"Moved Permanently"},{status:302,statusText:"Found"},{status:303,statusText:"See Other"},{status:304,statusText:"Not Modified"},{status:305,statusText:"Use Proxy"},{status:306,statusText:"unused"},{status:307,statusText:"Temporary Redirect"},{status:308,statusText:"Permanent Redirect"},{status:400,statusText:"Bad Request"},{status:401,statusText:"Unauthorized"},{status:402,statusText:"Payment Required"},{status:403,statusText:"Forbidden"},{status:404,statusText:"Not Found"},{status:405,statusText:"Method Not Allowed"},{status:406,statusText:"Not Acceptable "},{status:407,statusText:"Proxy Authentication Required"},{status:408,statusText:"Request Timeout"},{status:409,statusText:"Conflict"},{status:410,statusText:"Gone"},{status:411,statusText:"Length Required"},{status:412,statusText:"Precondition Failed"},{status:413,statusText:"Payload Too Large"},{status:414,statusText:"URI Too Long"},{status:415,statusText:"Unsupported Media Type"},{status:416,statusText:"Requested Range Not Satisfiable"},{status:417,statusText:"Expectation Failed"},{status:418,statusText:"I'm a teapot"},{status:421,statusText:"Misdirected Request"},{status:422,statusText:"Unprocessable Entity (WebDAV)"},{status:423,statusText:"Locked (WebDAV)"},{status:424,statusText:"Failed Dependency (WebDAV)"},{status:426,statusText:"Upgrade Required"},{status:428,statusText:"Precondition Required"},{status:429,statusText:"Too Many Requests"},{status:431,statusText:"Request Header Fields Too Large"},{status:451,statusText:"Unavailable For Legal Reasons"},{status:500,statusText:"Internal Server Error"},{status:501,statusText:"Not Implemented"},{status:502,statusText:"Bad Gateway"},{status:503,statusText:"Service Unavailable"},{status:504,statusText:"Gateway Timeout"},{status:505,statusText:"HTTP Version Not Supported"},{status:506,statusText:"Variant Also Negotiates"},{status:507,statusText:"Insufficient Storage"},{status:508,statusText:"Loop Detected (WebDAV)"},{status:510,statusText:"Not Extended"},{status:511,statusText:"Network Authentication Required"}]},799:function(t,s,e){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(s,"__esModule",{value:!0});const u=e(285),o=a(e(923)),n=t=>t.replace(/[^a-zA-Z0-9]/gu,""),r=[{status:"Informative",min:100,max:199},{status:"Success",min:200,max:299},{status:"Redirection",min:300,max:399},{status:"ClientError",min:400,max:499},{status:"ServerError",min:500,max:599}],i={findStatus(t){let s={status:0,statusText:""};if(Number.isInteger(t)?s=o.default.find((s=>s.status===t)):"string"==typeof t?s=o.default.find((s=>s.statusText===t)):"object"==typeof t&&Number.isInteger(t.status)&&(s=o.default.find((s=>s.status===t.status))),!s)throw new Error(`Status code not found: ${JSON.stringify(t)}`);return s},addRangeMethods(){for(let t=0;t<r.length;t+=1){const s=`is${r[t].status}`;i[s]=s=>this.isBetween(s,r[t].min,r[t].max)}return this},addStatusMethods(){for(let t=0;t<o.default.length;t+=1){const s=`is${n(o.default[t].statusText)}`;i[s]=s=>this.findStatus(s).status===o.default[t].status}return this},addFormatResponseMethods(){for(let t=0;t<o.default.length;t+=1){const s=`response${n(o.default[t].statusText)}`;i[s]=(s,e)=>this.formatResponse(o.default[t].status,s,e)}return this},isBetween(t,s,e){const a=i.findStatus(t);return a&&a.status>=s&&a.status<=e},formatResponseConfig(t,s){const e=t?.config?t.config.method:"",a=t?.config?t.config.data:{},u=t?.config?t.config.url:"",o=t?.request?t.request.responseURL:"";return{url:u||o,method:e,data:a,source:s}},formatResponse(t,s,e,a){const u=this.findStatus(t);return{status:u.status,statusText:u.statusText,config:Object.assign({url:"",method:"",data:{},source:""},a),data:s,error:e}},checkResponseData:t=>new u.HttpCheck(t)};i.addRangeMethods().addStatusMethods().addFormatResponseMethods(),t.exports=i}},s={};return function e(a){var u=s[a];if(void 0!==u)return u.exports;var o=s[a]={exports:{}};return t[a].call(o.exports,o,o.exports,e),o.exports}(799)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VUksS0FBSy9FLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVMyRSxHQUdwRTFFLEVBQU9ELFFDbEJXMkUsQ0FBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovL0BuaWNvbGFzbW9uZGFpbi9odHRwLXN0YXR1cy93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vQG5pY29sYXNtb25kYWluL2h0dHAtc3RhdHVzLy4vc3JjL2h0dHAtY2hlY2sudHMiLCJ3ZWJwYWNrOi8vQG5pY29sYXNtb25kYWluL2h0dHAtc3RhdHVzLy4vc3JjL2h0dHAtY29kZXMudHMiLCJ3ZWJwYWNrOi8vQG5pY29sYXNtb25kYWluL2h0dHAtc3RhdHVzLy4vc3JjL2h0dHAtc3RhdHVzLnRzIiwid2VicGFjazovL0BuaWNvbGFzbW9uZGFpbi9odHRwLXN0YXR1cy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9Abmljb2xhc21vbmRhaW4vaHR0cC1zdGF0dXMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KShnbG9iYWwsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuSHR0cENoZWNrID0gdm9pZCAwO1xyXG5jbGFzcyBIdHRwQ2hlY2sge1xyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gbnVsbDtcclxuICAgIH1cclxuICAgIG5lc3RlZChkYXRhKSB7XHJcbiAgICAgICAgbGV0IG5lc3RlZCA9IHt9O1xyXG4gICAgICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdGhpcy5yZXNwb25zZS5kYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBjb25zdCBhcnJheSA9IGRhdGEuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIG5lc3RlZCA9IHRoaXMucmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmVzdGVkICYmIHR5cGVvZiBuZXN0ZWRbYXJyYXlbaV1dICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRbYXJyYXlbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBhcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2UuZGF0YSAmJiB0eXBlb2YgdGhpcy5yZXNwb25zZS5kYXRhID09PSAnb2JqZWN0JyA/IHRoaXMucmVzcG9uc2UuZGF0YVthcnJheVswXV0gOiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlLmRhdGE7XHJcbiAgICB9XHJcbiAgICBleHBlY3QoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMubmVzdGVkKGRhdGEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgdG9CZUVxdWFsVG8oY29tcGFyZSkge1xyXG4gICAgICAgIHJldHVybiBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICd1bmRlZmluZWQnXS5pbmNsdWRlcyh0eXBlb2YgdGhpcy5kYXRhKSA/IHRoaXMuZGF0YSA9PT0gY29tcGFyZSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdG9CZUdyZWF0ZXJUaGFuKGNvbXBhcmUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZGF0YSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGNvbXBhcmUgPT09ICdudW1iZXInID8gdGhpcy5kYXRhID4gY29tcGFyZSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdG9CZUxlc3NUaGFuKGNvbXBhcmUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZGF0YSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGNvbXBhcmUgPT09ICdudW1iZXInID8gdGhpcy5kYXRhIDwgY29tcGFyZSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdG9CZVR5cGVvZihjb21wYXJlKSB7XHJcbiAgICAgICAgcmV0dXJuIFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJywgJ3VuZGVmaW5lZCddLmluY2x1ZGVzKGNvbXBhcmUpID8gdHlwZW9mIHRoaXMuZGF0YSA9PT0gY29tcGFyZSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdG9NYXRjaChjb21wYXJlKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmRhdGEgPT09ICdzdHJpbmcnICYmIGNvbXBhcmUgaW5zdGFuY2VvZiBSZWdFeHAgPyBjb21wYXJlLnRlc3QodGhpcy5kYXRhKSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgVG9CZU51bGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA9PT0gbnVsbDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkh0dHBDaGVjayA9IEh0dHBDaGVjaztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaHR0cENvZGVzID0gW1xyXG4gICAgeyBzdGF0dXM6IDEwMCwgc3RhdHVzVGV4dDogJ0NvbnRpbnVlJyB9LFxyXG4gICAgeyBzdGF0dXM6IDEwMSwgc3RhdHVzVGV4dDogJ1N3aXRjaGluZyBQcm90b2NvbCcgfSxcclxuICAgIHsgc3RhdHVzOiAxMDMsIHN0YXR1c1RleHQ6ICdQcm9jZXNzaW5nIChXZWJEQVYpJyB9LFxyXG4gICAgeyBzdGF0dXM6IDIwMCwgc3RhdHVzVGV4dDogJ09LJyB9LFxyXG4gICAgeyBzdGF0dXM6IDIwMSwgc3RhdHVzVGV4dDogJ0NyZWF0ZWQnIH0sXHJcbiAgICB7IHN0YXR1czogMjAyLCBzdGF0dXNUZXh0OiAnQWNjZXB0ZWQnIH0sXHJcbiAgICB7IHN0YXR1czogMjAzLCBzdGF0dXNUZXh0OiAnTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24nIH0sXHJcbiAgICB7IHN0YXR1czogMjA0LCBzdGF0dXNUZXh0OiAnTm8gQ29udGVudCcgfSxcclxuICAgIHsgc3RhdHVzOiAyMDUsIHN0YXR1c1RleHQ6ICdSZXNldCBDb250ZW50JyB9LFxyXG4gICAgeyBzdGF0dXM6IDIwNiwgc3RhdHVzVGV4dDogJ1BhcnRpYWwgQ29udGVudCcgfSxcclxuICAgIHsgc3RhdHVzOiAyMDcsIHN0YXR1c1RleHQ6ICdNdWx0aS1TdGF0dXMgKFdlYkRBViknIH0sXHJcbiAgICB7IHN0YXR1czogMjA4LCBzdGF0dXNUZXh0OiAnTXVsdGktU3RhdHVzIChXZWJEQVYpJyB9LFxyXG4gICAgeyBzdGF0dXM6IDIyNiwgc3RhdHVzVGV4dDogJ0lNIFVzZWQgKEhUVFAgRGVsdGEgZW5jb2RpbmcpJyB9LFxyXG4gICAgeyBzdGF0dXM6IDMwMCwgc3RhdHVzVGV4dDogJ011bHRpcGxlIENob2ljZScgfSxcclxuICAgIHsgc3RhdHVzOiAzMDEsIHN0YXR1c1RleHQ6ICdNb3ZlZCBQZXJtYW5lbnRseScgfSxcclxuICAgIHsgc3RhdHVzOiAzMDIsIHN0YXR1c1RleHQ6ICdGb3VuZCcgfSxcclxuICAgIHsgc3RhdHVzOiAzMDMsIHN0YXR1c1RleHQ6ICdTZWUgT3RoZXInIH0sXHJcbiAgICB7IHN0YXR1czogMzA0LCBzdGF0dXNUZXh0OiAnTm90IE1vZGlmaWVkJyB9LFxyXG4gICAgeyBzdGF0dXM6IDMwNSwgc3RhdHVzVGV4dDogJ1VzZSBQcm94eScgfSxcclxuICAgIHsgc3RhdHVzOiAzMDYsIHN0YXR1c1RleHQ6ICd1bnVzZWQnIH0sXHJcbiAgICB7IHN0YXR1czogMzA3LCBzdGF0dXNUZXh0OiAnVGVtcG9yYXJ5IFJlZGlyZWN0JyB9LFxyXG4gICAgeyBzdGF0dXM6IDMwOCwgc3RhdHVzVGV4dDogJ1Blcm1hbmVudCBSZWRpcmVjdCcgfSxcclxuICAgIHsgc3RhdHVzOiA0MDAsIHN0YXR1c1RleHQ6ICdCYWQgUmVxdWVzdCcgfSxcclxuICAgIHsgc3RhdHVzOiA0MDEsIHN0YXR1c1RleHQ6ICdVbmF1dGhvcml6ZWQnIH0sXHJcbiAgICB7IHN0YXR1czogNDAyLCBzdGF0dXNUZXh0OiAnUGF5bWVudCBSZXF1aXJlZCcgfSxcclxuICAgIHsgc3RhdHVzOiA0MDMsIHN0YXR1c1RleHQ6ICdGb3JiaWRkZW4nIH0sXHJcbiAgICB7IHN0YXR1czogNDA0LCBzdGF0dXNUZXh0OiAnTm90IEZvdW5kJyB9LFxyXG4gICAgeyBzdGF0dXM6IDQwNSwgc3RhdHVzVGV4dDogJ01ldGhvZCBOb3QgQWxsb3dlZCcgfSxcclxuICAgIHsgc3RhdHVzOiA0MDYsIHN0YXR1c1RleHQ6ICdOb3QgQWNjZXB0YWJsZSAnIH0sXHJcbiAgICB7IHN0YXR1czogNDA3LCBzdGF0dXNUZXh0OiAnUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWQnIH0sXHJcbiAgICB7IHN0YXR1czogNDA4LCBzdGF0dXNUZXh0OiAnUmVxdWVzdCBUaW1lb3V0JyB9LFxyXG4gICAgeyBzdGF0dXM6IDQwOSwgc3RhdHVzVGV4dDogJ0NvbmZsaWN0JyB9LFxyXG4gICAgeyBzdGF0dXM6IDQxMCwgc3RhdHVzVGV4dDogJ0dvbmUnIH0sXHJcbiAgICB7IHN0YXR1czogNDExLCBzdGF0dXNUZXh0OiAnTGVuZ3RoIFJlcXVpcmVkJyB9LFxyXG4gICAgeyBzdGF0dXM6IDQxMiwgc3RhdHVzVGV4dDogJ1ByZWNvbmRpdGlvbiBGYWlsZWQnIH0sXHJcbiAgICB7IHN0YXR1czogNDEzLCBzdGF0dXNUZXh0OiAnUGF5bG9hZCBUb28gTGFyZ2UnIH0sXHJcbiAgICB7IHN0YXR1czogNDE0LCBzdGF0dXNUZXh0OiAnVVJJIFRvbyBMb25nJyB9LFxyXG4gICAgeyBzdGF0dXM6IDQxNSwgc3RhdHVzVGV4dDogJ1Vuc3VwcG9ydGVkIE1lZGlhIFR5cGUnIH0sXHJcbiAgICB7IHN0YXR1czogNDE2LCBzdGF0dXNUZXh0OiAnUmVxdWVzdGVkIFJhbmdlIE5vdCBTYXRpc2ZpYWJsZScgfSxcclxuICAgIHsgc3RhdHVzOiA0MTcsIHN0YXR1c1RleHQ6ICdFeHBlY3RhdGlvbiBGYWlsZWQnIH0sXHJcbiAgICB7IHN0YXR1czogNDE4LCBzdGF0dXNUZXh0OiAnSVxcJ20gYSB0ZWFwb3QnIH0sXHJcbiAgICB7IHN0YXR1czogNDIxLCBzdGF0dXNUZXh0OiAnTWlzZGlyZWN0ZWQgUmVxdWVzdCcgfSxcclxuICAgIHsgc3RhdHVzOiA0MjIsIHN0YXR1c1RleHQ6ICdVbnByb2Nlc3NhYmxlIEVudGl0eSAoV2ViREFWKScgfSxcclxuICAgIHsgc3RhdHVzOiA0MjMsIHN0YXR1c1RleHQ6ICdMb2NrZWQgKFdlYkRBViknIH0sXHJcbiAgICB7IHN0YXR1czogNDI0LCBzdGF0dXNUZXh0OiAnRmFpbGVkIERlcGVuZGVuY3kgKFdlYkRBViknIH0sXHJcbiAgICB7IHN0YXR1czogNDI2LCBzdGF0dXNUZXh0OiAnVXBncmFkZSBSZXF1aXJlZCcgfSxcclxuICAgIHsgc3RhdHVzOiA0MjgsIHN0YXR1c1RleHQ6ICdQcmVjb25kaXRpb24gUmVxdWlyZWQnIH0sXHJcbiAgICB7IHN0YXR1czogNDI5LCBzdGF0dXNUZXh0OiAnVG9vIE1hbnkgUmVxdWVzdHMnIH0sXHJcbiAgICB7IHN0YXR1czogNDMxLCBzdGF0dXNUZXh0OiAnUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZScgfSxcclxuICAgIHsgc3RhdHVzOiA0NTEsIHN0YXR1c1RleHQ6ICdVbmF2YWlsYWJsZSBGb3IgTGVnYWwgUmVhc29ucycgfSxcclxuICAgIHsgc3RhdHVzOiA1MDAsIHN0YXR1c1RleHQ6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InIH0sXHJcbiAgICB7IHN0YXR1czogNTAxLCBzdGF0dXNUZXh0OiAnTm90IEltcGxlbWVudGVkJyB9LFxyXG4gICAgeyBzdGF0dXM6IDUwMiwgc3RhdHVzVGV4dDogJ0JhZCBHYXRld2F5JyB9LFxyXG4gICAgeyBzdGF0dXM6IDUwMywgc3RhdHVzVGV4dDogJ1NlcnZpY2UgVW5hdmFpbGFibGUnIH0sXHJcbiAgICB7IHN0YXR1czogNTA0LCBzdGF0dXNUZXh0OiAnR2F0ZXdheSBUaW1lb3V0JyB9LFxyXG4gICAgeyBzdGF0dXM6IDUwNSwgc3RhdHVzVGV4dDogJ0hUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkJyB9LFxyXG4gICAgeyBzdGF0dXM6IDUwNiwgc3RhdHVzVGV4dDogJ1ZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzJyB9LFxyXG4gICAgeyBzdGF0dXM6IDUwNywgc3RhdHVzVGV4dDogJ0luc3VmZmljaWVudCBTdG9yYWdlJyB9LFxyXG4gICAgeyBzdGF0dXM6IDUwOCwgc3RhdHVzVGV4dDogJ0xvb3AgRGV0ZWN0ZWQgKFdlYkRBViknIH0sXHJcbiAgICB7IHN0YXR1czogNTEwLCBzdGF0dXNUZXh0OiAnTm90IEV4dGVuZGVkJyB9LFxyXG4gICAgeyBzdGF0dXM6IDUxMSwgc3RhdHVzVGV4dDogJ05ldHdvcmsgQXV0aGVudGljYXRpb24gUmVxdWlyZWQnIH1cclxuXTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gaHR0cENvZGVzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBodHRwX2NoZWNrXzEgPSByZXF1aXJlKFwiLi9odHRwLWNoZWNrXCIpO1xyXG5jb25zdCBodHRwX2NvZGVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaHR0cC1jb2Rlc1wiKSk7XHJcbmNvbnN0IElORk9STUFUSVZFX01JTiA9IDEwMDtcclxuY29uc3QgSU5GT1JNQVRJVkVfTUFYID0gMTk5O1xyXG5jb25zdCBTVUNDRVNTX01JTiA9IDIwMDtcclxuY29uc3QgU1VDQ0VTU19NQVggPSAyOTk7XHJcbmNvbnN0IFJFRElSRUNUSU9OX01JTiA9IDMwMDtcclxuY29uc3QgUkVESVJFQ1RJT05fTUFYID0gMzk5O1xyXG5jb25zdCBDTElFTlRfRVJST1JfTUlOID0gNDAwO1xyXG5jb25zdCBDTElFTlRfRVJST1JfTUFYID0gNDk5O1xyXG5jb25zdCBTRVJWRVJfRVJST1JfTUlOID0gNTAwO1xyXG5jb25zdCBTRVJWRVJfRVJST1JfTUFYID0gNTk5O1xyXG5jb25zdCBybVNwZUNoYXJzID0gKHN0cmluZykgPT4gc3RyaW5nLnJlcGxhY2UoL1teYS16QS1aMC05XS9ndSwgJycpO1xyXG5jb25zdCBSQU5HRSA9IFtcclxuICAgIHsgc3RhdHVzOiAnSW5mb3JtYXRpdmUnLCBtaW46IElORk9STUFUSVZFX01JTiwgbWF4OiBJTkZPUk1BVElWRV9NQVggfSxcclxuICAgIHsgc3RhdHVzOiAnU3VjY2VzcycsIG1pbjogU1VDQ0VTU19NSU4sIG1heDogU1VDQ0VTU19NQVggfSxcclxuICAgIHsgc3RhdHVzOiAnUmVkaXJlY3Rpb24nLCBtaW46IFJFRElSRUNUSU9OX01JTiwgbWF4OiBSRURJUkVDVElPTl9NQVggfSxcclxuICAgIHsgc3RhdHVzOiAnQ2xpZW50RXJyb3InLCBtaW46IENMSUVOVF9FUlJPUl9NSU4sIG1heDogQ0xJRU5UX0VSUk9SX01BWCB9LFxyXG4gICAgeyBzdGF0dXM6ICdTZXJ2ZXJFcnJvcicsIG1pbjogU0VSVkVSX0VSUk9SX01JTiwgbWF4OiBTRVJWRVJfRVJST1JfTUFYIH1cclxuXTtcclxuY29uc3QgaHR0cFN0YXR1cyA9IHtcclxuICAgIGZpbmRTdGF0dXMoa2V5KSB7XHJcbiAgICAgICAgbGV0IHN0YXR1c0NvZGUgPSB7IHN0YXR1czogMCwgc3RhdHVzVGV4dDogJycgfTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihrZXkpKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGUgPSBodHRwX2NvZGVzXzEuZGVmYXVsdC5maW5kKChjb2RlKSA9PiBjb2RlLnN0YXR1cyA9PT0ga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZSA9IGh0dHBfY29kZXNfMS5kZWZhdWx0LmZpbmQoKGNvZGUpID0+IGNvZGUuc3RhdHVzVGV4dCA9PT0ga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgJiYgTnVtYmVyLmlzSW50ZWdlcihrZXkuc3RhdHVzKSkge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlID0gaHR0cF9jb2Rlc18xLmRlZmF1bHQuZmluZCgoY29kZSkgPT4gY29kZS5zdGF0dXMgPT09IGtleS5zdGF0dXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXN0YXR1c0NvZGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGF0dXMgY29kZSBub3QgZm91bmQ6ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0YXR1c0NvZGU7XHJcbiAgICB9LFxyXG4gICAgYWRkUmFuZ2VNZXRob2RzKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUkFOR0UubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gYGlzJHtSQU5HRVtpXS5zdGF0dXN9YDtcclxuICAgICAgICAgICAgaHR0cFN0YXR1c1ttZXRob2RdID0gKGtleSkgPT4gdGhpcy5pc0JldHdlZW4oa2V5LCBSQU5HRVtpXS5taW4sIFJBTkdFW2ldLm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGFkZFN0YXR1c01ldGhvZHMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBodHRwX2NvZGVzXzEuZGVmYXVsdC5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBgaXMke3JtU3BlQ2hhcnMoaHR0cF9jb2Rlc18xLmRlZmF1bHRbaV0uc3RhdHVzVGV4dCl9YDtcclxuICAgICAgICAgICAgaHR0cFN0YXR1c1ttZXRob2RdID0gKGtleSkgPT4gdGhpcy5maW5kU3RhdHVzKGtleSkuc3RhdHVzID09PSBodHRwX2NvZGVzXzEuZGVmYXVsdFtpXS5zdGF0dXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGFkZEZvcm1hdFJlc3BvbnNlTWV0aG9kcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGh0dHBfY29kZXNfMS5kZWZhdWx0Lmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGByZXNwb25zZSR7cm1TcGVDaGFycyhodHRwX2NvZGVzXzEuZGVmYXVsdFtpXS5zdGF0dXNUZXh0KX1gO1xyXG4gICAgICAgICAgICBodHRwU3RhdHVzW21ldGhvZF0gPSAoZGF0YSwgZXJyb3IpID0+IHRoaXMuZm9ybWF0UmVzcG9uc2UoaHR0cF9jb2Rlc18xLmRlZmF1bHRbaV0uc3RhdHVzLCBkYXRhLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGlzQmV0d2VlbihrZXksIG1pbiwgbWF4KSB7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IGh0dHBTdGF0dXMuZmluZFN0YXR1cyhrZXkpO1xyXG4gICAgICAgIHJldHVybiBjb2RlICYmIGNvZGUuc3RhdHVzID49IG1pbiAmJiBjb2RlLnN0YXR1cyA8PSBtYXg7XHJcbiAgICB9LFxyXG4gICAgZm9ybWF0UmVzcG9uc2VDb25maWcocmVzcG9uc2UsIHNvdXJjZSkge1xyXG4gICAgICAgIGNvbnN0IFJFU1BPTlNFX0NPTkZJR19NRVRIT0QgPSByZXNwb25zZT8uY29uZmlnID8gcmVzcG9uc2UuY29uZmlnLm1ldGhvZCA6ICcnO1xyXG4gICAgICAgIGNvbnN0IFJFU1BPTlNFX0NPTkZJR19EQVRBID0gcmVzcG9uc2U/LmNvbmZpZyA/IHJlc3BvbnNlLmNvbmZpZy5kYXRhIDoge307XHJcbiAgICAgICAgY29uc3QgUkVTUE9OU0VfQ09ORklHX1VSTCA9IHJlc3BvbnNlPy5jb25maWcgPyByZXNwb25zZS5jb25maWcudXJsIDogJyc7XHJcbiAgICAgICAgY29uc3QgUkVTUE9OU0VfUkVRVUVTVF9VUkwgPSByZXNwb25zZT8ucmVxdWVzdCA/IHJlc3BvbnNlLnJlcXVlc3QucmVzcG9uc2VVUkwgOiAnJztcclxuICAgICAgICBjb25zdCBmb3JtYXRSZXNwb25zZUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdXJsOiBSRVNQT05TRV9DT05GSUdfVVJMIHx8IFJFU1BPTlNFX1JFUVVFU1RfVVJMLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFJFU1BPTlNFX0NPTkZJR19NRVRIT0QsXHJcbiAgICAgICAgICAgIGRhdGE6IFJFU1BPTlNFX0NPTkZJR19EQVRBLFxyXG4gICAgICAgICAgICBzb3VyY2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBmb3JtYXRSZXNwb25zZUNvbmZpZztcclxuICAgIH0sXHJcbiAgICBmb3JtYXRSZXNwb25zZShrZXksIGRhdGEsIGVycm9yLCBjb25maWcpIHtcclxuICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5maW5kU3RhdHVzKGtleSk7XHJcbiAgICAgICAgY29uc3QgREVGQVVMVF9SRVNQT05TRV9DT05GSUcgPSB7XHJcbiAgICAgICAgICAgIHVybDogJycsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJycsXHJcbiAgICAgICAgICAgIGRhdGE6IHt9LFxyXG4gICAgICAgICAgICBzb3VyY2U6ICcnXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXM6IGNvZGUuc3RhdHVzLFxyXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiBjb2RlLnN0YXR1c1RleHQsXHJcbiAgICAgICAgICAgIGNvbmZpZzogT2JqZWN0LmFzc2lnbihERUZBVUxUX1JFU1BPTlNFX0NPTkZJRywgY29uZmlnKSxcclxuICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGNoZWNrUmVzcG9uc2VEYXRhKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBodHRwX2NoZWNrXzEuSHR0cENoZWNrKHJlc3BvbnNlKTtcclxuICAgIH1cclxufTtcclxuaHR0cFN0YXR1c1xyXG4gICAgLmFkZFJhbmdlTWV0aG9kcygpXHJcbiAgICAuYWRkU3RhdHVzTWV0aG9kcygpXHJcbiAgICAuYWRkRm9ybWF0UmVzcG9uc2VNZXRob2RzKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gaHR0cFN0YXR1cztcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OTkpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwiZ2xvYmFsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIkh0dHBDaGVjayIsImNvbnN0cnVjdG9yIiwicmVzcG9uc2UiLCJ0aGlzIiwiZGF0YSIsIm5lc3RlZCIsImFycmF5Iiwic3BsaXQiLCJsZW5ndGgiLCJleHBlY3QiLCJ0b0JlRXF1YWxUbyIsImNvbXBhcmUiLCJpbmNsdWRlcyIsInRvQmVHcmVhdGVyVGhhbiIsInRvQmVMZXNzVGhhbiIsInRvQmVUeXBlb2YiLCJ0b01hdGNoIiwiUmVnRXhwIiwidGVzdCIsIlRvQmVOdWxsIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJodHRwX2NoZWNrXzEiLCJodHRwX2NvZGVzXzEiLCJybVNwZUNoYXJzIiwic3RyaW5nIiwicmVwbGFjZSIsIlJBTkdFIiwibWluIiwibWF4IiwiaHR0cFN0YXR1cyIsImZpbmRTdGF0dXMiLCJrZXkiLCJzdGF0dXNDb2RlIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiZGVmYXVsdCIsImZpbmQiLCJjb2RlIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkUmFuZ2VNZXRob2RzIiwibWV0aG9kIiwiaXNCZXR3ZWVuIiwiYWRkU3RhdHVzTWV0aG9kcyIsImFkZEZvcm1hdFJlc3BvbnNlTWV0aG9kcyIsImVycm9yIiwiZm9ybWF0UmVzcG9uc2UiLCJmb3JtYXRSZXNwb25zZUNvbmZpZyIsInNvdXJjZSIsIlJFU1BPTlNFX0NPTkZJR19NRVRIT0QiLCJjb25maWciLCJSRVNQT05TRV9DT05GSUdfREFUQSIsIlJFU1BPTlNFX0NPTkZJR19VUkwiLCJ1cmwiLCJSRVNQT05TRV9SRVFVRVNUX1VSTCIsInJlcXVlc3QiLCJyZXNwb25zZVVSTCIsImFzc2lnbiIsImNoZWNrUmVzcG9uc2VEYXRhIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9